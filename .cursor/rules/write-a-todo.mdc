---
alwaysApply: false
description: Guideline to Write a TODO Document
glob:
---

# TODO Document

A TODO document is a driver to the development, which shall have the following sections:

## Section 1: Goal

Focus on one thing at a time. Define the goal of the a TODO document specifically, briefly,
and clearly. It should be as simple as replace a set of repeating code patterns with a unified
interface, or fix a specific bug replicated.

## Section 2: Action Items

Instead of directly developing the solution, the goal should be broken down into smaller, and
specific intermediate steps. Each step should have a clear purpose achievable.

1. Before developement, the developer should update the design documents of the corresponding
   modules to the new desired design.
   - If a new file need to be created as per the new design, it is highly recommended to and touch
     an empty file with the corresponding name with a single line of TODO comment inside so that
     when listing the action items, you have a file to refer to.
   - When finalizing the design document, it is required to discuss with a "team member",
     including but not limited to a human colleague or AI assistant, to ensure this design
     is clear and reasonable.
   - After the discussion, commit the design document with a message like
     "Update design document for xxx feature/bug fix".
2. Based on the updated design document, the TODO document is an action list. Each
   action item should be typically separated into two sub-items:
   - It starts with creating new tests. When developing a new feature, test-driven is a good practice
     The action item should be like "as per new design doc, create a new test case for xxx feature
     in the corresponding test file `unit-tests/xxx_test.py` or `ci-tests/xxx_tests`".
   - Then, clearly state the "deltas" between the current design and the new desired design to
     implement the new feature or fix the bug. The action item should be like
     "as per new source.md, the existing source.py should be refactored as follow by
     adding/removing xxx".
3. It is related to a prior change, as per our [action flow](./act-on-todo.mdc), the prior TODO
   will be located in a `dones` folder, so that refer to their changes.
   - As per changes in `TODO-yyy.md`, `<what issue>` was introduced, we should fix all the related files by `<doing what>`.