on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  ASSASSYN_DOCKER: docker run -v ${{ github.workspace }}:/app --user $(id -u):$(id -g) assassyn:latest

name: Test

jobs:
  test:
    name: Test
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true
      - name: Build Container
        run: docker build -t assassyn:latest .
      - name: Stop & Remove Existing Container
        run: |
          docker stop assassyn || true
          docker container rm assassyn || true
      - name: Initialize the Container
        run: |
          ${{ env.ASSASSYN_DOCKER }} git submodule update --init

      - name: Restore Python Package Cache
        id: cache-python
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.assassyn-venv
          key: ${{ runner.os }}-python-cache-${{ hashFiles('python/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-cache-

      - name: Restore Build Cache
        id: cache-build
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/3rd-party/verilator
            ${{ github.workspace }}/3rd-party/circt/frontends/PyCDE
            ${{ github.workspace }}/3rd-party/ramulator2/build
            ${{ github.workspace }}/tools/c-ramulator2-wrapper/build
          key: ${{ runner.os }}-build-cache-${{ hashFiles('Makefile') }}-${{ hashFiles('scripts/init/*.inc') }}-${{ hashFiles('python/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-build-cache-

      - name: Install Python Packages
        if: steps.cache-python.outputs.cache-hit != 'true'
        run: |
          echo "Python cache miss, installing packages"
          ${{ env.ASSASSYN_DOCKER }} /bin/zsh -c "pip install -r python/requirements.txt --break-system-packages"

      - name: Build All Components
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: |
          echo "Cache miss, building all components"
          ${{ env.ASSASSYN_DOCKER }} /bin/zsh -c "source setup.sh && make build-all"
      - name: Check Rust Code Quality
        run: |
          cargo fmt --manifest-path tools/rust-sim-runtime/Cargo.toml --all -- --check --config-path rustfmt.toml
          cargo clippy --manifest-path tools/rust-sim-runtime/Cargo.toml --all-targets --all-features -- -D warnings
      
      - name: Check Python Code Quality
        run: |
          ${{ env.ASSASSYN_DOCKER }} /bin/zsh -c "source setup.sh && make pylint"
      
      - name: Run All Tests
        run: |
          ${{ env.ASSASSYN_DOCKER }} /bin/zsh -c "source setup.sh && make test-all"
      - name: Cleanup Containers
        run: |
          docker rm -f $(docker ps -a --filter ancestor=assassyn:latest -q) 2>/dev/null || true
      
     
